version: 2.1

parameters:
  openreview-api-v1-branch:
    type: string
    default: "master"
  openreview-api-v2-branch:
    type: string
    default: "main"

jobs:
  build:
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
    parallelism: 10
    working_directory: ~/openreview-expertise
    docker:
      - image: ubuntu:22.04
      - image: redislabs/redisai
      - image: mongo:6.0
        command: [ --replSet, rs0 ]
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
        environment:
          xpack.security.enabled: false
          transport.host: localhost
          TZ: "Etc/UTC"
    environment:
      PYTHON_VERSION: 3.11
    steps:
      - checkout
      - run:
          name: Setup Miniconda
          command: |
            apt update
            apt install -y wget
            apt install -y make gcc
            apt install -y curl
            apt install -y build-essential
            apt install -y git
            apt install -y sudo
            DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt install -y tzdata
            cd $HOME
            wget "https://repo.anaconda.com/miniconda/Miniconda3-py311_24.9.2-0-Linux-x86_64.sh" -O miniconda.sh
            printf '%s' "62ef806265659c47e37e22e8f9adce29e75c4ea0497e619c280f54c823887c4f  miniconda.sh" | sha256sum -c
            bash miniconda.sh -b -p $HOME/miniconda
      - run:
          name: Install Node
          command: |
            cd ~/
            curl -Lk https://raw.githubusercontent.com/tj/n/master/bin/n -o n
            sudo bash n 22.14.0
            hash -r
            sudo npm install -g n
      - run:
          name: Setup environment
          command: |
            export PATH="$HOME/miniconda/bin:$PATH"
            conda update -y conda
            python -m ensurepip --upgrade
            python -m pip install --upgrade pip setuptools wheel setuptools_rust
            conda create -n expertise python=$PYTHON_VERSION -c conda-forge
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            python --version
            mkdir ~/expertise-utils
            cd ~/expertise-utils
            conda install "pytorch>=2.3" pytorch-cuda=12.4 -c pytorch -c nvidia
            conda install -y filelock
            wget https://storage.googleapis.com/openreview-public/openreview-expertise/models-data/multifacet_recommender_data.tar.gz -O mfr.tar.gz
            tar -xzvf mfr.tar.gz
            mv ./multifacet_recommender_data ./multifacet_recommender
            cd ~/openreview-expertise
            python -m pip install -e .
            conda install -y intel-openmp==2019.4
            conda install -y -c conda-forge faiss-cpu=1.7.4 "pytorch>=2.3"
            python -m pip install -I protobuf==3.20.1
      - run:
          name: Initialize replica set
          command: |
            # Source the utility functions  
            source ~/openreview-expertise/.circleci/ci-utils.sh

            retry sudo apt-get install gnupg curl
            curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
            echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
            retry sudo apt-get update
            retry sudo apt-get upgrade -y
            retry sudo apt-get install -y mongodb-org=6.0.7
            mongosh mongodb://localhost:27017 --eval "rs.initiate()"
      - run:
          name: Clone OpenReview API V1 branch << pipeline.parameters.openreview-api-v1-branch >>
          command: |
            git clone https://$OPENREVIEW_GITHUB@github.com/openreview/openreview-api-v1.git ~/openreview
            cd ~/openreview && git checkout << pipeline.parameters.openreview-api-v1-branch >>
      - run:
          name: Clone OpenReview API V2 branch << pipeline.parameters.openreview-api-v2-branch >>
          command: |
            git clone https://$OPENREVIEW_GITHUB@github.com/openreview/openreview-api.git ~/openreview-v2
            cd ~/openreview-v2 && git checkout << pipeline.parameters.openreview-api-v2-branch >>
      - run:
          name: Clone openreview-py 
          command: |
            git clone https://$OPENREVIEW_GITHUB@github.com/openreview/openreview-py.git ~/openreview-py
      - run:
          name: Create API directories
          command: |
            mkdir -p ~/openreview/logs
            mkdir -p ~/openreview/files/attachments
            mkdir -p ~/openreview/files/pdfs
            mkdir -p ~/openreview/files/temp
            mkdir -p ~/openreview-v2/logs
            mkdir -p ~/openreview-v2/files/attachments
            mkdir -p ~/openreview-v2/files/pdfs
            mkdir -p ~/openreview-v2/files/temp
      - run:
          name: Install openreview-py
          command: |
            mkdir ~/openreview-py/coverage
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            pip install -e ~/openreview-py
      - run:
          name: Start API V1
          command: |
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            cd ~/openreview
            npm run cleanStart
          background: true
      - run:
          name: Wait for API V1 to start
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000
            :
      - run:
          name: Start API V2
          command: |
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            cd ~/openreview-v2
            npm run cleanStart
          background: true
      - run:
          name: Wait for API V2 to start
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 30 http://localhost:3001
            :
      - run:
          name: Run tests
          command: |
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            cd ~/openreview-expertise
            TEST_FILES=$(circleci tests glob "tests/test_*.py")
            mkdir reports
            mkdir reports/pytest
            echo "$TEST_FILES" | circleci tests run --command="xargs python -m pytest -x --junitxml=reports/pytest/pytest-report.xml --ignore=expertise" --verbose --split-by=timings
      - run:
          name: Copy API logs to artifacts
          when: on_fail
          command: |
            cp ~/openreview/logs/* ~/openreview-expertise/reports/
            cp ~/openreview-v2/logs/* ~/openreview-expertise/reports/
      - store_test_results:
          path: reports
      - store_artifacts:
          when: always
          path: reports
