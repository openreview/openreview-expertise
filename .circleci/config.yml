version: 2.1

parameters:
  openreview-api-v1-branch:
    type: string
    default: "master"
  openreview-api-v2-branch:
    type: string
    default: "main"

orbs:
  gcp-cli: circleci/gcp-cli@3.3.1

jobs:
  build:
    machine:
      image: ubuntu-2204:2022.10.2
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
    parallelism: 10
    working_directory: ~/openreview-expertise
    environment:
      PYTHON_VERSION: 3.11
      GOOGLE_CLOUD_PROJECT: $GOOGLE_PROJECT_ID
    steps:
      - checkout
      - run:
          name: Install curl for GCP CLI
          command: |
            sudo apt update
            sudo apt install -y curl ca-certificates gnupg
      - gcp-cli/setup:
          google_project_id: GOOGLE_PROJECT_ID
          google_project_number: GOOGLE_PROJECT_NUMBER
          service_account_email: SERVICE_ACCOUNT_EMAIL
          use_oidc: true
          workload_identity_pool_id: WORKLOAD_IDENTITY_POOL_ID
          workload_identity_pool_provider_id: WORKLOAD_IDENTITY_POOL_PROVIDER_ID
      - run:
          name: "Verify Authentication"
          command: |
            gcloud auth list
            gcloud projects list
      - run:
          name: Setup Miniconda
          command: |
            sudo apt update
            sudo apt install -y wget make gcc curl build-essential git
            DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC sudo apt install -y tzdata
            cd $HOME
            wget "https://repo.anaconda.com/miniconda/Miniconda3-py311_24.9.2-0-Linux-x86_64.sh" -O miniconda.sh
            printf '%s' "62ef806265659c47e37e22e8f9adce29e75c4ea0497e619c280f54c823887c4f  miniconda.sh" | sha256sum -c
            bash miniconda.sh -b -p $HOME/miniconda
      - run:
          name: Install Node 20
          command: |
            sudo apt-get remove -y nodejs
            sudo rm -f /usr/local/bin/node /usr/local/bin/npm
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            export PATH=/usr/bin:$PATH
            node -v
            npm -v
            sudo ln -sf /usr/bin/node /usr/local/bin/node
            sudo ln -sf /usr/bin/npm /usr/local/bin/npm
            which node
            whereis node
            which npm
            whereis npm
      - run:
          name: Setup environment
          command: |
            export PATH="$HOME/miniconda/bin:$PATH"
            conda update -y conda
            python -m ensurepip --upgrade
            python -m pip install --upgrade pip setuptools wheel setuptools_rust
            conda create -n expertise python=$PYTHON_VERSION -c conda-forge
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            python --version
            mkdir ~/expertise-utils
            cd ~/expertise-utils
            conda install "pytorch>=2.3" pytorch-cuda=12.4 -c pytorch -c nvidia
            conda install -y filelock
            wget https://storage.googleapis.com/openreview-public/openreview-expertise/models-data/multifacet_recommender_data.tar.gz -O mfr.tar.gz
            tar -xzvf mfr.tar.gz
            mv ./multifacet_recommender_data ./multifacet_recommender
            cd ~/openreview-expertise
            python -m pip install -e .
            conda install -y intel-openmp==2019.4
            conda install -y -c conda-forge faiss-cpu=1.7.4 "pytorch>=2.3"
            python -m pip install -I protobuf==3.20.1
      - run:
          name: Initialize MongoDB
          command: |
            docker run -d --name mongodb -p 27017:27017 mongo:6.0 --replSet rs0
            sleep 10
            docker exec mongodb mongosh mongodb://localhost:27017 --eval "rs.initiate()"
      - run:
          name: Start Elasticsearch
          command: |
            docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "xpack.security.enabled=false" -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.7.0
      - run:
          name: Start Redis
          command: |
            docker run -d --name redis -p 6379:6379 redislabs/redisai
      - run:
          name: Clone OpenReview API V1 branch << pipeline.parameters.openreview-api-v1-branch >>
          command: |
            git clone https://$OPENREVIEW_GITHUB@github.com/openreview/openreview-api-v1.git ~/openreview
            cd ~/openreview && git checkout << pipeline.parameters.openreview-api-v1-branch >>
      - run:
          name: Clone OpenReview API V2 branch << pipeline.parameters.openreview-api-v2-branch >>
          command: |
            git clone https://$OPENREVIEW_GITHUB@github.com/openreview/openreview-api.git ~/openreview-v2
            cd ~/openreview-v2 && git checkout << pipeline.parameters.openreview-api-v2-branch >>
      - run:
          name: Clone openreview-py 
          command: |
            git clone https://$OPENREVIEW_GITHUB@github.com/openreview/openreview-py.git ~/openreview-py
      - run:
          name: Create API directories
          command: |
            mkdir -p ~/openreview/logs
            mkdir -p ~/openreview/files/attachments
            mkdir -p ~/openreview/files/pdfs
            mkdir -p ~/openreview/files/temp
            mkdir -p ~/openreview-v2/logs
            mkdir -p ~/openreview-v2/files/attachments
            mkdir -p ~/openreview-v2/files/pdfs
            mkdir -p ~/openreview-v2/files/temp
      - run:
          name: Install openreview-py
          command: |
            mkdir ~/openreview-py/coverage
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            pip install -e ~/openreview-py
      - run:
          name: Start API V1
          command: |
            export PATH=/usr/bin:$PATH
            node -v
            which node
            whereis node
            which npm
            whereis npm
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            cd ~/openreview
            /usr/local/bin/npm run cleanStart
          background: true
      - run:
          name: Wait for API V1 to start
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000
            :
      - run:
          name: Start API V2
          command: |
            export PATH=/usr/bin:$PATH
            node -v
            which node
            whereis node
            which npm
            whereis npm
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            cd ~/openreview-v2
            /usr/local/bin/npm run cleanStart
          background: true
      - run:
          name: Wait for API V2 to start
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=2 --read-timeout=20 --timeout=15 -t 45 http://localhost:3001
            :
      - run:
          name: Run tests
          command: |
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            cd ~/openreview-expertise
            TEST_FILES=$(circleci tests glob "tests/test_*.py")
            mkdir reports
            mkdir reports/pytest
            echo "$TEST_FILES" | circleci tests run --command="xargs python -m pytest -x --junitxml=reports/pytest/pytest-report.xml --ignore=expertise" --verbose --split-by=timings
      - run:
          name: Build and test container locally
          command: |
            source ~/miniconda/etc/profile.d/conda.sh
            conda activate expertise
            
            # Build image locally (no push)
            echo "Building Docker image locally..."
            docker build -t expertise-test:${CIRCLE_SHA1:0:12} .
            
            # Run container tests against local image
            # Note: Services are accessible via localhost from within remote docker
            echo "Running container tests..."
            docker run --network host \
              -e PYTHONUNBUFFERED=1 \
              -e DEBUG=1 \
              -e LOG_LEVEL=DEBUG \
              -e "GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT" \
              -v $(pwd)/test_output:/app/output \
              -v "$HOME/.config/gcloud:/root/.config/gcloud:ro" \
              -v "/home/circleci:/home/circleci:ro" \
              -v "$GOOGLE_APPLICATION_CREDENTIALS:$GOOGLE_APPLICATION_CREDENTIALS" \
              -e "GOOGLE_APPLICATION_CREDENTIALS" \
              --entrypoint="" \
              expertise-test:${CIRCLE_SHA1:0:12} \
              python -m pytest tests -v --tb=short
      - run:
          name: Copy API logs to artifacts
          when: on_fail
          command: |
            cp ~/openreview/logs/* ~/openreview-expertise/reports/
            cp ~/openreview-v2/logs/* ~/openreview-expertise/reports/
      - store_test_results:
          path: reports
      - store_artifacts:
          when: always
          path: reports
