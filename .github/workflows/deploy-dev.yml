# This workflow deploys the master brance to the dev site

name: dev-deployment

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch or tag to deploy'
        required: false
        default: 'master'
      py_branch:
        description: 'openreview-py branch or tag to deploy'
        required: false
        default: 'master'
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ master ]
env:
  REGION: us
  KFP_REGION: us-central1
  KFP_REPO: openreview-kfp
  REPO: openreview-docker-images
  PROJECT: sunlit-realm-131518
  PIPELINE_NAME: openreview-expertise-dev
  IMAGE_NAME: expertise-dev
jobs:
  deploy:
    # Allow the job to fetch a GitHub ID token
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Add SSH key
        run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.GCLOUD_SSH_KEY }}" > /home/runner/.ssh/google_compute_engine
          echo "${{ secrets.GCLOUD_SSH_KEY_PUB }}" > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 /home/runner/.ssh/google_compute_engine
          chmod 600 /home/runner/.ssh/google_compute_engine.pub
      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          cleanup_credentials: true
          export_environment_variables: true
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Setup Docker authentication
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: Set Environment Variables
        run: |
          # Simple: Use branch/tag name + commit SHA of the main repo
          BRANCH="${{ github.event.inputs.branch || 'master' }}"
          PY_BRANCH="${{ github.event.inputs.py_branch || 'master' }}"
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Clean branch name (replace / with -)
          CLEAN_BRANCH=$(echo "$BRANCH" | sed 's/\//-/g')
          CLEAN_PY_BRANCH=$(echo "$PY_BRANCH" | sed 's/\//-/g')
          
          # Create simple tag: branch-pybranch-sha
          IMAGE_TAG_VERSION="${CLEAN_BRANCH}-${CLEAN_PY_BRANCH}-${SHORT_SHA}"
          
          echo "IMAGE_TAG_VERSION=$IMAGE_TAG_VERSION" >> $GITHUB_ENV
          echo "OPENREVIEW_PY_VERSION=${{ github.event.inputs.py_branch || 'master' }}" >> $GITHUB_ENV
          echo "KFP_PIPELINE_NAME=${{ env.PIPELINE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
      - name: Check if image exists
        id: image_check
        run: |
          IMAGE_PATH="${{ env.IMAGE_TAG }}:${{ env.IMAGE_TAG_VERSION }}"
          echo "Checking for image: ${IMAGE_PATH}"
          
          if docker manifest inspect "${IMAGE_PATH}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install kfp google-cloud-pipeline-components
      - name: Set up Docker Buildx
        if: steps.image_check.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        if: steps.image_check.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Push multiple tags: the version provided
          tags: |
            ${{ env.IMAGE_TAG }}:${{ env.IMAGE_TAG_VERSION }}
          build-args: |
            OPENREVIEW_PY_VERSION=${{ env.OPENREVIEW_PY_VERSION }}
          cache-from: type=registry,ref=${{ env.IMAGE_TAG }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_TAG }}:buildcache,mode=max
      - name: Build and push Kubeflow pipeline
        run: |
          python expertise/build_pipeline.py \
            --region "${{ env.REGION }}" \
            --kfp_region "${{ env.KFP_REGION }}" \
            --project "${{ env.PROJECT }}" \
            --repo "${{ env.REPO }}" \
            --kfp_repo "${{ env.KFP_REPO }}" \
            --kfp_name "${{ env.KFP_PIPELINE_NAME }}" \
            --image "${{ env.IMAGE }}" \
            --tag "${{ env.IMAGE_TAG_VERSION }}"
      - name: Run deploy script
        run: |
          BRANCH="${{ github.event.inputs.branch || 'master' }}"
          PY_BRANCH="${{ github.event.inputs.py_branch || 'master' }}"
          gcloud config set compute/zone us-central1-b
          gcloud compute ssh openreview@dev-instance-1 --command "bash /home/openreview/bin/deploy-expertise.sh $BRANCH $PY_BRANCH" --quiet
